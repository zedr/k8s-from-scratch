---
- hosts: k8s
  vars:
    base_url: "https://storage.googleapis.com/kubernetes-release/release"
    k8s_version: "1.20.0"
    crio_version: "1.20.0"
    runc_version: "1.0.0-rc92"
    crictl_version: "1.19.0"
    go_version: "1.15.6"
    cni_version: "0.8.7"
    target_dir: "/usr/local/bin"
    pod_cidr: "10.200.0.0/16"
    arch: amd64
  tasks:
    
    - name: Install dependencies
      yum:
        name:
          - socat
          - conntrack-tools
          - ipset

    - name: Disable Swap
      command:
        argv:
          - "swapoff"
          - "-a"

    - name: Disable swap permanently, persist reboots
      lineinfile:
        path: /etc/fstab
        regexp: '^(/swapfile.*)'
        line: '#\1'
        backrefs: yes
        state: present

    - name: Create installation directories
      file:
        state: directory
        path: "{{ item }}"
      with_items:
        - /etc/cni/net.d
        - /opt/cni/bin
        - /var/lib/kubelet
        - /var/lib/kube-proxy
        - /var/lib/kubernetes
        - /var/run/kubernetes
        - "/tmp/crictl-v{{ crictl_version }}"

    - name: Get Kubernetes binaries
      get_url: 
        url: "{{ base_url}}/v{{ k8s_version }}/bin/linux/{{ arch }}/{{ item }}"
        dest: "{{ target_dir }}/{{ item }}"
        mode: "u+x"
      with_items:
        - kubectl
        - kubelet
        - kube-proxy

    - include_tasks:
        file: crio-build.yml

    - name: Get crictl binary archive
      unarchive:
        src: "https://github.com/kubernetes-sigs/cri-tools/releases/download/v{{ crictl_version }}/crictl-v{{ crictl_version }}-linux-{{ arch }}.tar.gz"
        remote_src: yes
        dest: "/tmp/crictl-v{{ crictl_version }}"

    - name: Copy crictl binaries
      copy:
        src: "/tmp/crictl-v{{ crictl_version }}/crictl"
        remote_src: yes
        dest: "{{ target_dir }}/crictl"
        mode: "u+x"

    - name: Create crio config file with parameters
      lineinfile:
        path: /etc/crio/crio.conf
        regexp: "^cgroup_driver ?="
        line: "cgroup_driver = \"systemd\""

    - name: Get and unpack CNI plugins archive
      unarchive:
        src: "https://github.com/containernetworking/plugins/releases/download/v{{ cni_version }}/cni-plugins-linux-{{ arch }}-v{{ cni_version }}.tgz"
        remote_src: yes
        dest: "/opt/cni/bin"
        mode: "u+x"

    - name: Copy the CNI configuration files
      copy:
        src: "worker/{{ item }}"
        dest: "/etc/cni/net.d/"
        mode: 0700
      with_items:
        - 10-bridge.conf
        - 99-loopback.conf
      tags:
        - replacements

    - name: Replace CIDR stub
      replace:
        path: "/etc/cni/net.d/10-bridge.conf"
        regexp: '\$\{POD_CIDR\}'
        replace: '{{ pod_cidr }}'
      tags:
        - replacements

    - name: Copy certificate files for this worker host
      copy:
        src: "{{ ansible_env.HOME }}/{{ item.filename }}"
        remote_src: yes
        dest: "{{ item.dest_path }}/{{ item.filename }}"
      with_items:
        - filename: "{{ ansible_hostname }}-key.pem"
          dest_path: /var/lib/kubelet
        - filename: "{{ ansible_hostname }}.pem"
          dest_path: /var/lib/kubelet
        - filename: "{{ ansible_hostname }}.kubeconfig"
          dest_path: /var/lib/kubelet
        - filename: "kube-proxy.kubeconfig"
          dest_path: /var/lib/kube-proxy
        - filename: ca.pem
          dest_path: /var/lib/kubernetes

    - name: Create Kubelet configuration file
      blockinfile:
        create: yes
        path: "/var/lib/kubelet/kubelet-config.yaml"
        content: |
          kind: KubeletConfiguration
          apiVersion: kubelet.config.k8s.io/v1beta1
          authentication:
            anonymous:
              enabled: false
            webhook:
              enabled: true
            x509:
              clientCAFile: "/var/lib/kubernetes/ca.pem"
          authorization:
            mode: Webhook
          clusterDomain: "cluster.local"
          clusterDNS:
            - "10.32.0.10"
          podCIDR: "${POD_CIDR}"
          resolvConf: "/etc/resolv.conf"
          runtimeRequestTimeout: "15m"
          tlsCertFile: "/var/lib/kubelet/{{ ansible_hostname }}.pem"
          tlsPrivateKeyFile: "/var/lib/kubelet/{{ ansible_hostname }}-key.pem"

    - name: Create the Kubelet Unit
      blockinfile:
        create: yes
        path: "/usr/lib/systemd/system/kubelet.service"
        content: |
          [Unit]
          Description=Kubernetes Kubelet
          Documentation=https://github.com/kubernetes/kubernetes
          After=crio.service
          Requires=crio.service

          [Service]
          ExecStart=/usr/local/bin/kubelet \
            --config=/var/lib/kubelet/kubelet-config.yaml \
            --container-runtime=remote \
            --container-runtime-endpoint=unix:///var/run/crio/crio.sock \
            --runtime-request-timeout=10m \
            --image-pull-progress-deadline=2m \
            --kubeconfig=/var/lib/kubelet/{{ ansible_hostname }}.kubeconfig \
            --network-plugin=cni \
            --register-node=true \
            --cgroup-driver=systemd \
            --v=2
          Restart=on-failure
          RestartSec=5

          [Install]
          WantedBy=multi-user.target

    - name: Create the Proxy configuration file
      blockinfile:
        create: yes
        path: "/var/lib/kube-proxy/kube-proxy-config.yaml"
        content: |
          kind: KubeProxyConfiguration
          apiVersion: kubeproxy.config.k8s.io/v1alpha1
          clientConnection:
            kubeconfig: "/var/lib/kube-proxy/kube-proxy.kubeconfig"
          mode: "iptables"
          clusterCIDR: "10.200.0.0/16"

    - name: Create the Proxy Unit
      blockinfile:
        create: yes
        path: "/usr/lib/systemd/system/kube-proxy.service"
        content: |
          [Unit]
          Description=Kubernetes Kube Proxy
          Documentation=https://github.com/kubernetes/kubernetes

          [Service]
          ExecStart=/usr/local/bin/kube-proxy \
            --config=/var/lib/kube-proxy/kube-proxy-config.yaml
          Restart=on-failure
          RestartSec=5

          [Install]
          WantedBy=multi-user.target

    - name: Disable SELinux (FIXME)
      command: "setenforce 0"

    - name: Enable and start the services
      systemd:
        name: "{{ item }}"
        daemon_reload: yes
        enabled: yes
        state: started
      with_items:
        - cri-o
        - kubelet
        - kube-proxy

    - name: Copy over the required cluster role binding manifests
      copy:
        src: "{{ item }}"
        dest: "{{ ansible_env.HOME }}"
      with_items:
        - user/apiserver-kubelet-admin_crb.yml

    - name: Create the required cluster role bindings
      command:
        argv:
          - "kubectl"
          - "apply"
          - "-f"
          - "{{ ansible_env.HOME }}/{{ item }}"
      with_items:
        - apiserver-kubelet-admin_crb.yml
